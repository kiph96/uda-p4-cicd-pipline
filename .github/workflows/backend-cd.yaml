name: Backend CD

# When the workflow will run
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.12.1
  CONTAINER_REGISTRY: backend
  IMAGE_TAG: latest

# Jobs pipeline
jobs:
  lint:
    name: LINT JOB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv flake8

      - name: Install Linter dependencies
        run: |
          pipenv install

      - name: Run lint
        run: |
          pipenv run lint

  test:
    name: TEST JOB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv pytest

      - name: Install dependencies
        run: |
          pipenv install

      - name: Run Backend Tests
        run: |
          pipenv run test

  build:
    name: Deploy AWS
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login AWS
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set Kubeconfig
        run: |
          mkdir -p ~/.kube
          aws eks update-kubeconfig --name cluster --region us-east-1 --kubeconfig ~/.kube/config
          export KUBECONFIG=~/.kube/config

      - name: Verify Kubernetes Context
        run: |
          kubectl config current-context

      - name: Build and Push Image to ECR
        run: |
          kubectl get svc
          docker build -t ${{ env.CONTAINER_REGISTRY }} .
          docker tag ${{ env.CONTAINER_REGISTRY }}:${{ env.IMAGE_TAG }} 262724436437.dkr.ecr.us-east-1.amazonaws.com/${{ env.CONTAINER_REGISTRY }}:${{ env.IMAGE_TAG }}
          docker push 262724436437.dkr.ecr.us-east-1.amazonaws.com/${{ env.CONTAINER_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to AWS EKS
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
          cd k8s
          kustomize edit set image backend=262724436437.dkr.ecr.us-east-1.amazonaws.com/${{ env.CONTAINER_REGISTRY }}:${{ env.IMAGE_TAG }}
          kustomize build | kubectl apply -f -
